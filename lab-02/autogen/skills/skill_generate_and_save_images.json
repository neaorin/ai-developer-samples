{
    "user_id": "guestuser@gmail.com",
    "version": "0.0.1",
    "name": "generate_and_save_images",
    "content": "\nfrom typing import List\nimport uuid\nimport requests  # to perform HTTP requests\nfrom pathlib import Path\n\nfrom openai import AzureOpenAI\n\n\ndef generate_and_save_images(query: str, image_size: str = \"1024x1024\") -> List[str]:\n    \"\"\"\n    Function to paint, draw or illustrate images based on the users query or request. Generates images from a given query using OpenAI's DALL-E model and saves them to disk.  Use the code below anytime there is a request to create an image.\n\n    :param query: A natural language description of the image to be generated.\n    :param image_size: The size of the image to be generated. (default is \"1024x1024\")\n    :return: A list of filenames for the saved images.\n    \"\"\"\n\n    AZURE_OPENAI_API_ENDPOINT=os.getenv(\"AZURE_OPENAI_API_ENDPOINT\")\n    AZURE_OPENAI_API_KEY=os.getenv(\"AZURE_OPENAI_API_KEY\")\n    AZURE_OPENAI_DALLE_DEPLOYMENT_NAME=os.getenv(\"AZURE_OPENAI_DALLE_DEPLOYMENT_NAME\")\n\n    client = AzureOpenAI(\n        api_version=\"2024-06-01\",\n        api_key=AZURE_OPENAI_API_KEY,\n        azure_endpoint=AZURE_OPENAI_API_ENDPOINT,\n    )\n    response = client.images.generate(model=AZURE_OPENAI_DALLE_DEPLOYMENT_NAME, prompt=query, n=1, size=image_size)  # Generate images\n\n    # List to store the file names of saved images\n    saved_files = []\n\n    # Check if the response is successful\n    if response.data:\n        for image_data in response.data:\n            # Generate a random UUID as the file name\n            file_name = str(uuid.uuid4()) + \".png\"  # Assuming the image is a PNG\n            file_path = Path(file_name)\n\n            img_url = image_data.url\n            img_response = requests.get(img_url)\n            if img_response.status_code == 200:\n                # Write the binary content to a file\n                with open(file_path, \"wb\") as img_file:\n                    img_file.write(img_response.content)\n                    print(f\"Image saved to {file_path}\")\n                    saved_files.append(str(file_path))\n            else:\n                print(f\"Failed to download the image from {img_url}\")\n    else:\n        print(\"No image data found in the response!\")\n\n    # Return the list of saved files\n    return saved_files\n\n\n# Example usage of the function:\n# generate_and_save_images(\"A cute baby sea otter\")\n",
    "description": "Generate and save images based on a user's query.",
    "libraries": [
        "openai"
    ]
}