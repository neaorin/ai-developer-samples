{
    "user_id": "guestuser@gmail.com",
    "version": "0.0.1",
    "name": "web_search",
    "content": "# function and class to search the web and return a summary of results\n# usage: web_search(\"<query>\")\n\nimport requests\nimport os\nfrom typing import List, Tuple, Optional\n\nBING_API_KEY = os.getenv(\"BING_API_KEY\")\n\n# Define the structure of a search result entry\nResponseEntry = Tuple[str, str, str]\n\n# Configuration variables for the web search function\nCONFIG = {\n    \"api_provider\": \"bing\",  # or \"google\"\n    \"result_count\": 3,\n    # For Google Search enter these values \n    # Refer to readme for help\n    \"google_api_key\": \"your_google_api_key_here\",\n    \"google_search_engine_id\": \"your_google_search_engine_id_here\",\n    # Or Bing Search enter these values\n    \"bing_api_key\": BING_API_KEY\n}\n\nclass WebSearch:\n    \"\"\"\n    A class that encapsulates the functionality to perform web searches using\n    Google Custom Search API or Bing Search API based on the provided configuration.\n    \"\"\"\n\n    def __init__(self, config: dict):\n        \"\"\"\n        Initializes the WebSearch class with the provided configuration.\n\n        Parameters:\n        - config (dict): A dictionary containing configuration settings.\n        \"\"\"\n        self.config = config\n\n    def search_query(self, query: str) -> Optional[List[ResponseEntry]]:\n        \"\"\"\n        Performs a web search based on the query and configuration.\n\n        Parameters:\n        - query (str): The search query string.\n\n        Returns:\n        - A list of ResponseEntry tuples containing the title, URL, and snippet of each result.\n        \"\"\"\n        api_provider = self.config.get(\"api_provider\", \"google\")\n        result_count = int(self.config.get(\"result_count\", 3))\n        try:\n            if api_provider == \"google\":\n                return self._search_google(query, cnt=result_count)\n            elif api_provider == \"bing\":\n                return self._search_bing(query, cnt=result_count)\n        except ValueError as e:\n            print(f\"An error occurred: {e}\")\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\")\n        return None\n\n    def _search_google(self, query: str, cnt: int) -> Optional[List[ResponseEntry]]:\n        \"\"\"\n        Performs a Google search and processes the results.\n        Parameters:\n        - query (str): The search query string.\n        - cnt (int): The number of search results to return.\n\n        Returns:\n        - A list of ResponseEntry tuples containing the title, URL, and snippet of each Google search result.\n        \"\"\"\n        api_key = self.config.get(\"google_api_key\")\n        search_engine_id = self.config.get(\"google_search_engine_id\")\n        url = f\"https://www.googleapis.com/customsearch/v1?key={api_key}&cx={search_engine_id}&q={query}\"\n        if cnt > 0:\n            url += f\"&num={cnt}\"\n        response = requests.get(url)\n        if response.status_code == 200:\n            result_list: List[ResponseEntry] = []\n            for item in response.json().get(\"items\", []):\n                result_list.append((item[\"title\"], item[\"link\"], item[\"snippet\"]))\n            return result_list\n        else:\n            print(f\"Error with Google Custom Search API: {response.status_code}\")\n            return None\n\n    def _search_bing(self, query: str, cnt: int) -> Optional[List[ResponseEntry]]:\n        \"\"\"\n        Performs a Bing search and processes the results.\n\n        Parameters:\n        - query (str): The search query string.\n        - cnt (int): The number of search results to return.\n\n        Returns:\n        - A list of ResponseEntry tuples containing the name, URL, and snippet of each Bing search result.\n        \"\"\"\n        api_key = self.config.get(\"bing_api_key\")\n        url = f\"https://api.bing.microsoft.com/v7.0/search?q={query}\"\n        if cnt > 0:\n            url += f\"&count={cnt}\"\n        headers = {\"Ocp-Apim-Subscription-Key\": api_key}\n        response = requests.get(url, headers=headers)\n        if response.status_code == 200:\n            result_list: List[ResponseEntry] = []\n            for item in response.json().get(\"webPages\", {}).get(\"value\", []):\n                result_list.append((item[\"name\"], item[\"url\"], item[\"snippet\"]))\n            return result_list\n        else:\n            print(f\"Error with Bing Search API: {response.status_code}\")\n            return None\n\n# Remember to replace the placeholders in CONFIG with your actual API keys.\ndef web_search(query: str) -> Optional[List[ResponseEntry]]:\n    search = WebSearch(CONFIG)\n    results = search.search_query(query)\n    return results",
    "description": "Search the web for up-to-date information based on a query",
    "libraries": []
}